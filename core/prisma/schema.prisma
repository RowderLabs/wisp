datasource db {
    provider = "sqlite"
    url      = "file:../../app/dev.db"
}

generator client {
    provider = "cargo prisma"
    output   = "../src/prisma.rs"
}

model BinderItem {
    id Int @id @default(autoincrement())
    itemType String?
    character Person?
    pathId Int? @unique
    //path to self
    binderPath BinderPath? @relation(fields: [pathId], references: [id])
}

// /characters => 1 true characters null null 1 
// /characters/1 => 2 false Lord character {id 1, name Lord} 2

model BinderPath {
    id Int @id @default(autoincrement())
    isCollection Boolean @default(false)
    path String
    name String
    parentId Int?
    parent BinderPath? @relation("directchildren",fields: [parentId], references: [id])
    //paths to all items in collecion
    children BinderPath[] @relation("directchildren")
    item BinderItem?
}


model Person {
    id Int @id @default(autoincrement())
    name String
    parentRelationId Int?
    familyId Int?
    binderItemId Int? @unique
    family Family? @relation(fields: [familyId], references: [id], onDelete: Cascade)
    parents   Person[]   @relation("parentchildren")
    //all children belonging to person
    children Person[]  @relation("parentchildren")
    //relationship in which person is a product of
    childOf Relationship? @relation("children", fields: [parentRelationId], references: [id])
    //relationships where person is a member
    relationships Relationship[] @relation("members")
    binderItem BinderItem? @relation(fields: [binderItemId], references: [id])
    attributes CharacterAttribute[]
}

model Family {
    id Int @id @default(autoincrement())
    name String
    members Person[]
}

model Relationship {
    id Int @id @default(autoincrement())
    relationshipType String
    //members of a specific relationship
    members Person[] @relation("members")
    //children that are a product of a specific relationship
    children Person[] @relation("children")
}

//lookup table for all attributes
model Attribute {
    id Int @id @default(autoincrement())
    label String
    attribute_group String
    character_has_attribute CharacterAttribute[]
}

model CharacterAttribute {
    attributeValue String
    attributeId Int
    characterId Int
    attribute Attribute @relation(fields: [attributeId], references: [id])
    character Person @relation(fields: [characterId], references: [id])
    @@id([attributeId, characterId])
}